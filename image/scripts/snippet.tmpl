<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.1.2/dist/tf.min.js"></script>
<script src="https://storage.googleapis.com/tm-pro/{{version}}/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // the json file (model topology) has a reference to the bin file (model weights)
    const checkpointURL = '{{checkpoint}}';
    // the metatadata json file contains the text labels of your model and additional information
    const metadataURL = '{{metadata}}';

    let model;
    let webcamEl;

    async function init() {
        // load the model and metadata
        model = await tm.mobilenet.load(checkpointURL, metadataURL);
        const maxPredictions = model.getTotalClasses();

        // optional function for creating a webcam
        // webcam has a square ratio and is flipped by default to match training
        webcamEl = await tm.getWebcam(200, 200);
        webcamEl.play();
        document.body.appendChild(webcamEl);

        // use tm.mobilenet.loadFromFiles() function to support files from a file picker or files from your local hard drive
        // you need to create File objects, like with file input elements (<input type="file" ...>)
        // const uploadJSONInput = document.getElementById('upload-json');
        // const uploadWeightsInput = document.getElementById('upload-weights');
        // model = await tm.mobilenet.loadFromFiles(uploadJSONInput.files[0], uploadWeightsInput.files[0])

        // predict can take in an image, video or canvas html element
        // we set flip to true since the webcam was only flipped in CSS
        const flip = true;
        const prediction = await model.predict(webcamEl, flip, maxPredictions);
        console.log(prediction);
    }


    init();
</script>
